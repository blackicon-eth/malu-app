import type { Branded } from "../utils.js";
import type { WebProof } from "./webProof.js";
export declare const EXTENSION_STEP: {
    readonly expectUrl: "expectUrl";
    readonly startPage: "startPage";
    readonly notarize: "notarize";
};
export type ExtensionStep = (typeof EXTENSION_STEP)[keyof typeof EXTENSION_STEP];
export declare const enum ExtensionAction {
    RequestWebProof = 0,
    NotifyZkProvingStatus = 1
}
export declare enum ZkProvingStatus {
    NotStarted = "notStarted",
    Proving = "proving",
    Done = "done",
    Error = "error"
}
export type MessageToExtension = {
    action: ExtensionAction.RequestWebProof;
    payload: WebProverSessionConfig;
} | {
    action: ExtensionAction.NotifyZkProvingStatus;
    payload: {
        status: ZkProvingStatus;
    };
};
export declare enum ExtensionMessageType {
    ProofDone = "ProofDone",
    ProofError = "ProofError",
    RedirectBack = "RedirectBack",
    TabOpened = "TabOpened"
}
export type ExtensionMessage = {
    type: ExtensionMessageType.ProofDone;
    proof: WebProof;
} | {
    type: ExtensionMessageType.ProofError;
    error: string;
} | {
    type: ExtensionMessageType.RedirectBack;
} | {
    type: ExtensionMessageType.TabOpened;
    tabId: number;
};
export type WebProverSessionConfig = {
    notaryUrl: string | null;
    wsProxyUrl: string | null;
    logoUrl: string | null;
    steps: WebProofStep[];
};
export type WebProofStep = WebProofStepNotarize | WebProofStepExpectUrl | WebProofStepStartPage;
export type WebProofStepNotarize = Branded<{
    url: string;
    method: string;
    label: string;
    step: typeof EXTENSION_STEP.notarize;
}, "notarize">;
export type WebProofStepExpectUrl = Branded<{
    url: string;
    label: string;
    step: typeof EXTENSION_STEP.expectUrl;
}, "expectUrl">;
export type WebProofStepStartPage = Branded<{
    url: string;
    label: string;
    step: typeof EXTENSION_STEP.startPage;
}, "startPage">;
